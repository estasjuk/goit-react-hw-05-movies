{"version":3,"file":"static/js/762.27c99f58.chunk.js","mappings":"sPACA,EAA2B,2BAA3B,EAAsE,gCAAtE,EAA6G,uB,SCIvGA,EAAW,SAAC,GAAc,IACxBC,EADuB,EAAXC,KACIC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAb,OACxB,2BACE,gBACEC,UAAWC,EACXC,IACEH,EAAY,6CAC8BA,GACtC,4FAENI,IAAKL,EACLM,QAAQ,UAEV,cAAGJ,UAAWC,EAAd,SAAyBH,MAXlBD,EADe,IAgB1B,OAAO,eAAIG,UAAWC,EAAf,SAA8BP,GACtC,EAED,GAAeW,EAAAA,EAAAA,MAAKZ,GAEpBA,EAASa,aAAe,CACtBC,MAAO,I,aCST,EA/Ba,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOb,EAAP,KAAac,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOJ,EAAP,KAAgBM,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,sGAEnBN,GAAW,GAFQ,UAGAO,EAAAA,EAAAA,IAAoBJ,GAHpB,OAGbK,EAHa,OAInBT,EAAQS,EAAKvB,MAJM,gDAKVwB,EALU,KAKVA,SACTP,EAASO,EAASD,KAAKE,SANJ,yBAQnBV,GAAW,GARQ,4EAAH,qDAWpBM,GACD,GAAE,CAACH,KAGF,4BACE,SAAC,EAAD,CAAUlB,KAAMA,IACfgB,IAAS,mDACTP,IAAW,SAACiB,EAAA,EAAD,MAGjB,ECzBD,EARiB,WACf,OACE,+BACE,SAAC,EAAD,KAGL,C,sLCNKC,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAiB,mCAAG,sGACRL,EAASM,IAAI,uBADL,uBACvBV,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjBW,EAAe,mCAAG,WAAMhB,GAAN,yFACNS,EAASM,IAAT,iBAAuBf,IADjB,uBACrBK,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfY,EAAmB,mCAAG,WAAOC,GAAP,8FAAcC,EAAd,+BAAqB,EAArB,SACVV,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CACNM,MAAAA,EACAC,KAAAA,KAJ6B,uBACzBd,EADyB,EACzBA,KADyB,kBAO1BA,GAP0B,2CAAH,sDAUnBD,EAAmB,mCAAG,WAAMgB,GAAN,yFACVX,EAASM,IAAT,iBAAuBK,EAAvB,aADU,uBACzBf,EADyB,EACzBA,KADyB,kBAE1BA,GAF0B,2CAAH,sDAKnBgB,EAAsB,mCAAG,WAAMD,GAAN,yFACbX,EAASM,IAAT,iBAAuBK,EAAvB,aADa,uBAC5Bf,EAD4B,EAC5BA,KAD4B,kBAE7BA,GAF6B,2CAAH,qD","sources":["webpack://react-homework-template/./src/components/Cast/CastList/CastList.module.css?e0f3","components/Cast/CastList/CastList.jsx","components/Cast/Cast.jsx","pages/CastPage/CastPage.jsx","shared/services/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"CastList\":\"CastList_CastList__ceVky\",\"CastListImage\":\"CastList_CastListImage__g657f\",\"name\":\"CastList_name__wVDRV\"};","import PropTypes from 'prop-types';\nimport { memo } from 'react';\n\nimport css from './CastList.module.css';\n\nconst CastList = ({ cast }) => {\n  const elements = cast.map(({ id, name, profile_path }) => (\n    <li key={id}>\n      <img\n        className={css.CastListImage}\n        src={\n          profile_path\n            ? `https://image.tmdb.org/t/p/original${profile_path}`\n            : 'https://ik.imagekit.io/tc8jxffbcvf/default-movie-portrait_EmJUj9Tda5wa.jpg?tr=fo-auto,di-'\n        }\n        alt={name}\n        loading=\"lazy\"\n      />\n      <p className={css.name}>{name}</p>\n    </li>\n  ));\n\n  return <ul className={css.CastList}>{elements}</ul>;\n};\n\nexport default memo(CastList);\n\nCastList.defaultProps = {\n  casts: [],\n};\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { searchCastByMovieId } from 'shared/services/movies-api';\nimport CastList from './CastList/CastList';\nimport Loader from 'shared/components/Loader/Loader';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        setLoading(true);\n        const data = await searchCastByMovieId(movieId);\n        setCast(data.cast);\n      } catch ({ response }) {\n        setError(response.data.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      <CastList cast={cast} />\n      {error && <p>Something goes wrong...</p>}\n      {loading && <Loader />}\n    </div>\n  );\n};\n\nexport default Cast;\n","import Cast from '../../components/Cast/Cast';\n\nconst CastPage = () => {\n  return (\n    <>\n      <Cast />\n    </>\n  );\n};\n\nexport default CastPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'a7a8c3125d3bc96af718eb60f4553f10',\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}`);\n  return data;\n};\n\nexport const searchMoviesByTitle = async (query, page = 1) => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n      page,\n    },\n  });\n  return data;\n};\n\nexport const searchCastByMovieId = async movie_id => {\n  const { data } = await instance.get(`/movie/${movie_id}/credits`);\n  return data;\n};\n\nexport const searchReviewsByMovieId = async movie_id => {\n  const { data } = await instance.get(`/movie/${movie_id}/reviews`);\n  return data;\n};\n"],"names":["CastList","elements","cast","map","id","name","profile_path","className","css","src","alt","loading","memo","defaultProps","casts","useState","setCast","setLoading","error","setError","movieId","useParams","useEffect","fetchMovieCast","searchCastByMovieId","data","response","message","Loader","instance","axios","baseURL","params","api_key","getTrendingMovies","get","getMovieDetails","searchMoviesByTitle","query","page","movie_id","searchReviewsByMovieId"],"sourceRoot":""}