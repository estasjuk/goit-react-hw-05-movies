{"version":3,"file":"static/js/855.f343e9b2.chunk.js","mappings":"+PAGMA,EAAc,SAAC,GAAiB,IAC9BC,EAD6B,EAAdC,QACIC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAC3B,2BACE,wBAAKD,KACL,uBAAIC,MAFGF,EADkB,IAO7B,OAAO,wBAAKH,GACb,EAED,GAAeM,EAAAA,EAAAA,MAAKP,GAEpBA,EAAYQ,aAAe,CACzBN,QAAS,I,aCqBX,EA/BgB,WACd,OAA8BO,EAAAA,EAAAA,UAAS,IAAvC,eAAOP,EAAP,KAAgBQ,EAAhB,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,sGAEtBN,GAAW,GAFW,UAGHO,EAAAA,EAAAA,IAAuBJ,GAHpB,OAGhBK,EAHgB,OAItBV,EAAWU,EAAKC,SAJM,gDAKbC,EALa,KAKbA,SACTR,EAASQ,EAASF,KAAKG,SAND,yBAQtBX,GAAW,GARW,4EAAH,qDAWvBM,GACD,GAAE,CAACH,KAGF,4BACE,SAAC,EAAD,CAAab,QAASA,IACrBW,IAAS,mDACTF,IAAW,SAACa,EAAA,EAAD,MAGjB,EC1BD,EARoB,WAClB,OACE,+BACE,SAAC,EAAD,KAGL,C,sLCNKC,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAiB,mCAAG,sGACRL,EAASM,IAAI,uBADL,uBACvBX,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjBY,EAAe,mCAAG,WAAMjB,GAAN,yFACNU,EAASM,IAAT,iBAAuBhB,IADjB,uBACrBK,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfa,EAAmB,mCAAG,WAAOC,GAAP,8FAAcC,EAAd,+BAAqB,EAArB,SACVV,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CACNM,MAAAA,EACAC,KAAAA,KAJ6B,uBACzBf,EADyB,EACzBA,KADyB,kBAO1BA,GAP0B,2CAAH,sDAUnBgB,EAAmB,mCAAG,WAAMC,GAAN,yFACVZ,EAASM,IAAT,iBAAuBM,EAAvB,aADU,uBACzBjB,EADyB,EACzBA,KADyB,kBAE1BA,GAF0B,2CAAH,sDAKnBD,EAAsB,mCAAG,WAAMkB,GAAN,yFACbZ,EAASM,IAAT,iBAAuBM,EAAvB,aADa,uBAC5BjB,EAD4B,EAC5BA,KAD4B,kBAE7BA,GAF6B,2CAAH,qD","sources":["components/Reviews/ReviewsList/ReviewsList.jsx","components/Reviews/Reviews.jsx","pages/ReviewsPage/ReviewsPage.jsx","shared/services/movies-api.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { memo } from 'react';\n\nconst ReviewsList = ({ reviews }) => {\n  const elements = reviews.map(({ id, author, content }) => (\n    <li key={id}>\n      <h3>{author}</h3>\n      <p>{content}</p>\n    </li>\n  ));\n\n  return <ol>{elements}</ol>;\n};\n\nexport default memo(ReviewsList);\n\nReviewsList.defaultProps = {\n  reviews: [],\n};\n\nReviewsList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { searchReviewsByMovieId } from 'shared/services/movies-api';\nimport ReviewsList from './ReviewsList/ReviewsList';\nimport Loader from 'shared/components/Loader/Loader';\n\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        setLoading(true);\n        const data = await searchReviewsByMovieId(movieId);\n        setReviews(data.results);\n      } catch ({ response }) {\n        setError(response.data.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      <ReviewsList reviews={reviews} />\n      {error && <p>Something goes wrong...</p>}\n      {loading && <Loader />}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import Reviews from '../../components/Reviews/Reviews';\n\nconst ReviewsPage = () => {\n  return (\n    <>\n      <Reviews />\n    </>\n  );\n};\n\nexport default ReviewsPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'a7a8c3125d3bc96af718eb60f4553f10',\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}`);\n  return data;\n};\n\nexport const searchMoviesByTitle = async (query, page = 1) => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n      page,\n    },\n  });\n  return data;\n};\n\nexport const searchCastByMovieId = async movie_id => {\n  const { data } = await instance.get(`/movie/${movie_id}/credits`);\n  return data;\n};\n\nexport const searchReviewsByMovieId = async movie_id => {\n  const { data } = await instance.get(`/movie/${movie_id}/reviews`);\n  return data;\n};\n"],"names":["ReviewsList","elements","reviews","map","id","author","content","memo","defaultProps","useState","setReviews","loading","setLoading","error","setError","movieId","useParams","useEffect","fetchMovieReviews","searchReviewsByMovieId","data","results","response","message","Loader","instance","axios","baseURL","params","api_key","getTrendingMovies","get","getMovieDetails","searchMoviesByTitle","query","page","searchCastByMovieId","movie_id"],"sourceRoot":""}